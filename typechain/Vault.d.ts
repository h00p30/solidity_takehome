/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "cancelGrant(uint256)": FunctionFragment;
    "countToGrant(uint256)": FunctionFragment;
    "createGrant(uint256,uint96,address,address)": FunctionFragment;
    "grantCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdrawGrant(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelGrant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countToGrant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGrant",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawGrant",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countToGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGrant",
    data: BytesLike
  ): Result;

  events: {};
}

export class Vault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultInterface;

  functions: {
    cancelGrant(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countToGrant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean] & {
        amount: BigNumber;
        unlockTimestamp: BigNumber;
        recipient: string;
        token: string;
        active: boolean;
      }
    >;

    "countToGrant(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean] & {
        amount: BigNumber;
        unlockTimestamp: BigNumber;
        recipient: string;
        token: string;
        active: boolean;
      }
    >;

    createGrant(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createGrant(uint256,uint96,address,address)"(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "grantCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawGrant(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelGrant(
    grantnumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelGrant(uint256)"(
    grantnumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countToGrant(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, boolean] & {
      amount: BigNumber;
      unlockTimestamp: BigNumber;
      recipient: string;
      token: string;
      active: boolean;
    }
  >;

  "countToGrant(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, boolean] & {
      amount: BigNumber;
      unlockTimestamp: BigNumber;
      recipient: string;
      token: string;
      active: boolean;
    }
  >;

  createGrant(
    amount: BigNumberish,
    unlockTimestamp: BigNumberish,
    recipient: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createGrant(uint256,uint96,address,address)"(
    amount: BigNumberish,
    unlockTimestamp: BigNumberish,
    recipient: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantCount(overrides?: CallOverrides): Promise<BigNumber>;

  "grantCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  withdrawGrant(
    grantnumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawGrant(uint256)"(
    grantnumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelGrant(
      grantnumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    countToGrant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean] & {
        amount: BigNumber;
        unlockTimestamp: BigNumber;
        recipient: string;
        token: string;
        active: boolean;
      }
    >;

    "countToGrant(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean] & {
        amount: BigNumber;
        unlockTimestamp: BigNumber;
        recipient: string;
        token: string;
        active: boolean;
      }
    >;

    createGrant(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createGrant(uint256,uint96,address,address)"(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantCount(overrides?: CallOverrides): Promise<BigNumber>;

    "grantCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    withdrawGrant(
      grantnumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancelGrant(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countToGrant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countToGrant(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGrant(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createGrant(uint256,uint96,address,address)"(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantCount(overrides?: CallOverrides): Promise<BigNumber>;

    "grantCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawGrant(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelGrant(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countToGrant(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countToGrant(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGrant(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createGrant(uint256,uint96,address,address)"(
      amount: BigNumberish,
      unlockTimestamp: BigNumberish,
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "grantCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawGrant(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawGrant(uint256)"(
      grantnumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
